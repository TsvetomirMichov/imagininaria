import React from 'react'
import Navbar from '../../components/Navbar/Navbar'
import Footer from '../../components/Footer/Footer'
import { Box, Typography, Link } from '@mui/material'
import TopImageLeft1 from '../../images/about/image.webp'
import TopImageLeft2 from '../../images/about/top_left.webp'
import TopImageRight1 from '../../images/about/top_right.webp'
import TopImageRight2 from '../../images/about/bottom_right.webp'
import styled from '@emotion/styled'


import { useState } from 'react';
import { createNewUser } from '../lib/firebase';
import { auth } from '../lib/firebase';
import { addDoc, collection } from 'firebase/firestore';
import { firestore } from '../lib/firebase';
import { TextField, Button } from '@mui/material';
import UploadIcon from '../../images/upload-icon-3.png'

import Collapse from '@mui/material/Collapse';
import IconButton from '@mui/material/IconButton';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';
import DeleteIcon from '@mui/icons-material/Delete';
import { TransitionGroup } from 'react-transition-group';

import Instagram from './instagram.png'
import Twitter from './twitter.png'
import Mail from './mail.png'

const BoxTop = styled(Box)(({ theme }) => ({
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-around',

}));

const ImageContainer = styled(Box)({
    position: 'relative',
    width: '10%',
    '& img': {
        display: 'block',
    },
    '&::before': {
        content: '""',
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        height: '30%',
        background: 'linear-gradient(rgba(255, 255, 255, 0.5), transparent)',
    },
});



const SignupPage = () => {
    const SOCIALS = [
        { icon: Instagram, text: 'Instagram' },
        { icon: Twitter, text: 'Twitter' },
        { icon: Mail, text: 'Email' },
    ];

    const [socialLinks, setSocialLinks] = useState(SOCIALS.map((item) => ({ ...item, url: '' })));
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState(null);
    const [file, setFile] = useState('');
    const [imageUrl, setImageUrl] = useState('');

    const handleAddSocialLink = (social) => {
        console.log('Adding social link:', social);

        const updatedLinks = [...socialLinks];
        const existingItemIndex = updatedLinks.findIndex((link) => link.text === social.text);

        if (existingItemIndex !== -1) {
            updatedLinks[existingItemIndex].url = '';
            setSocialLinks(updatedLinks);
        }
    };


    const handleRemoveSocialLink = (item) => {
        const updatedLinks = socialLinks.filter((link) => link.text !== item.text);
        setSocialLinks(updatedLinks);
    };


    const handleSubmit = async (e) => {
        e.preventDefault();

        // Validate inputs
        if (!email || !password) {
            alert('Please fill in all fields');
            return;
        }

        try {

            const uploadImage = () => {
                const name = file.name;
                console.log("name : ", name)
                console.log('post image name : ', postDetails.imageData)
                const storageRef = ref(storage, name);
                const uploadTask = uploadBytesResumable(storageRef, file);

                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        console.log('Upload is ' + progress + '% done');
                        setPerc(progress)
                        switch (snapshot.state) {
                            case 'paused':
                                console.log('Upload is paused');
                                break;
                            case 'running':
                                console.log('Upload is running');
                                break;
                            default:
                                break;
                        }
                    },
                    (error) => {
                        console.log(error)
                    },
                    () => {
                        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {
                            setImageUrl(downloadURL)

                        });
                    }
                );
            }
            uploadImage()
            if (perc === 100) {
                // Collect social links that are not empty
                const validSocialLinks = socialLinks.filter((link) => link.url.trim() !== '');

                // Create a new user and store data in the Firebase database
                const res = await createNewUser(auth, email, password);
                await addDoc(collection(firestore, 'users'), {
                    userId: res.user.uid,
                    email: email,
                    password: password,
                    profileImage: imageUrl,
                    socialLinks: validSocialLinks,
                });

                // Clear input fields
                setFile('');
                setSocialLinks(SOCIALS.map((item) => ({ ...item, url: '' })));
            }
        } catch (error) {
            const errorCode = error.code;
            const errorMessage = error.message;
            console.error('Error signing up:', errorCode, ' ', errorMessage);
            setError('An error occurred while signing up');
        }
    };

    return (
        <div>
            <Box sx={{
                position: 'relative',
            }}>
                <Navbar />
                <Box sx={{
                    backgroundColor: '#171717',
                    color: 'white',
                    width: '100%',
                    height: '100vh',
                    display: 'flex',
                    flexDirection: 'row',
                    justifyContent: 'space-around',
                }}>
                    <BoxTop sx={{ mt: '10em', padding: '1.5em', display: { xs: 'none', sm: 'flex' } }}>

                        <Box sx={{ display: 'flex', flexDirection: 'row', mt: '-1em', mr: '1em' }}>
                            <Box gap={5} mt={2} p={{ xs: 4, sm: 5 }} position={'relative'} sx={{ display: 'flex', flexDirection: 'column' }}>
                                <ImageContainer>
                                    <img src={TopImageRight1} width={190} height={230} alt="Image 5" />
                                </ImageContainer>

                                <img src={TopImageLeft2} width={190} height={230} alt="Image 3" />

                            </Box>
                            <Box gap={5} position={'relative'} sx={{ display: 'flex', flexDirection: 'column' }}>
                                <ImageContainer>
                                    <img src={TopImageLeft1} width={190} height={230} alt="Image 5" />
                                </ImageContainer>

                                <img src={TopImageRight2} width={190} height={230} alt="Image 3" />
                            </Box>
                        </Box>
                    </BoxTop>
                    <Box display="flex" alignItems="center" mr={10}>
                        <form onSubmit={handleSubmit} style={{ maxWidth: '400px', width: '100%', padding: '16px' }}>
                            <Typography variant="h4" align="left" gutterBottom>
                                Register to  Become a creator
                            </Typography>
                            <Box className="left" sx={{ mb: { xs: '2em', sm: 0 }, width: '15em', height: '9em', display: 'block' }}>
                                <img width={'full'} style={{ objectFit: 'cover' }} height={150} src={file ? URL.createObjectURL(file) : UploadIcon} alt="" />
                                <Box className="formInput" sx={{ mb: '5em' }}>
                                    <label htmlFor="file">Profile Image</label>
                                    <input type="file" id="file" style={{ display: 'none' }} onChange={(e) => setFile(e.target.files[0])} />
                                </Box>
                            </Box>

                            <div>
                                <Button
                                    variant="contained"
                                    onClick={() => handleAddSocialLink(SOCIALS[socialLinks.length])}
                                >
                                    Add Social Link
                                </Button>
                                <Box sx={{ mt: 1 }}>
                                    <List>
                                        <TransitionGroup>
                                            {socialLinks.map((item) => (
                                                <Collapse key={item.text}>
                                                    <ListItem
                                                        secondaryAction={
                                                            <IconButton
                                                                edge="end"
                                                                aria-label="delete"
                                                                title="Delete"
                                                                onClick={() => handleRemoveSocialLink(item)}
                                                            >
                                                                <DeleteIcon sx={{ color: 'white' }} />
                                                            </IconButton>
                                                        }
                                                    >
                                                        <ListItemText
                                                            primary={
                                                                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                                                    <img src={item.icon} alt={item.text} style={{ marginRight: '8px', width: '20px', height: '20px' }} />
                                                                    {item.text}
                                                                </Box>
                                                            }
                                                        />
                                                        <TextField
                                                            label="Social Link"
                                                            variant="outlined"
                                                            fullWidth
                                                            value={item.url}
                                                            onChange={(e) => {
                                                                const updatedLinks = [...socialLinks];
                                                                const currentItemIndex = updatedLinks.findIndex((link) => link.text === item.text);
                                                                updatedLinks[currentItemIndex].url = e.target.value;
                                                                setSocialLinks(updatedLinks);
                                                            }}
                                                        />
                                                    </ListItem>
                                                </Collapse>
                                            ))}
                                        </TransitionGroup>
                                    </List>
                                </Box>
                            </div>

                            <div style={{ marginBottom: '16px', display: 'block', marginTop: '3em' }}>
                                <Typography variant="body1" fontWeight="bold">
                                    Email:
                                </Typography>
                                <TextField
                                    fullWidth
                                    variant="outlined"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    style={{ backgroundColor: '#262626', minWidth: '20em' }}
                                />
                            </div>
                            <div style={{ marginBottom: '1.5em' }}>
                                <Typography variant="body1" fontWeight="bold">
                                    Password:
                                </Typography>
                                <TextField
                                    fullWidth
                                    type="password"
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    variant="outlined"
                                    style={{ backgroundColor: '#262626' }}
                                />
                            </div>
                            <Button variant="contained" color="warning" type="submit" fullWidth>
                                Sign Up
                            </Button>
                            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '16px' }}>
                                <Typography variant="body1" fontWeight="bold" sx={{ paddingRight: '8px' }}>
                                    Already a member?
                                </Typography>
                                <Link sx={{
                                    color: 'white',
                                }} href="/becomeACreator">Sign in now</Link>
                            </div>
                        </form>
                    </Box>
                </Box>
            </Box>
            <Footer />

        </div>
    )
}

export default SignupPage